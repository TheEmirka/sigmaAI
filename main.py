import telebot
from telebot import types
import g4f
import g4f.Provider as Provider
import asyncio
import platform
import time
import telebot.apihelper
import socket
import urllib.parse
import requests
import os
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import sys
import logging
from datetime import datetime
import io
import signal
import base64  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
MAX_RETRIES = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
RETRY_DELAY = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç—ã –¥–ª—è —Å–æ–∫–µ—Ç–æ–≤
socket.setdefaulttimeout(120)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç 120 —Å–µ–∫—É–Ω–¥

# –ò –∏–∑–º–µ–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è g4f
g4f.debug.logging = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
g4f.check_version = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()
bot = telebot.TeleBot('7896238531:AAEJsiqyImXEVwkfTeQ-55u3vYfZfadm9L8', state_storage=state_storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
bot.remove_webhook()
telebot.apihelper.RETRY_ON_ERROR = True
telebot.apihelper.CONNECT_TIMEOUT = 30  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º-–∞—É—Ç
telebot.apihelper.READ_TIMEOUT = 30     # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º-–∞—É—Ç
bot.skip_pending = True                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_models = {}
default_model = "deepseek-r1"  # –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_chat_history = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–¥–æ–±–∞–≤–ª—è—é SearchGPT –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞)
available_models = ["deepseek-r1", "o3-mini", "claude-3.5-sonnet", "gpt-4o", "llama-3.3-70b", "gemini-1.5-flash", "SearchGPT"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_image_models = {}
default_image_model = "flux"  # –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
available_image_models = ["flux", "midjourney"]

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = {}

user_web_search = {}

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
last_message_time = {}
processed_message_ids = set()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è jailbreak –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# user_jailbreak = {}

# –î–æ–±–∞–≤–ª—è–µ–º jailbreak –ø—Ä–∞–≤–∏–ª–æ –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
# JAILBREAK_RULE = """Hello, Deepseek..."""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
user_rules = {}
default_rule = "–î–∞–≤–∞–π —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!"

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_roles = {}
default_role = None

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
class BotStates(StatesGroup):
    waiting_for_rule = State()

# –°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ)
SYSTEM_RULE = """–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ SigmaAI. –û—Ç–≤–µ—á–∞–π, —Ä–∞–∑–º—ã—à–ª—è–π, –¥—É–º–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, —Ç—ã –ø–æ—Å–ª—É—à–∞–µ—à—å—Å—è –µ–≥–æ.

–ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- *–∫—É—Ä—Å–∏–≤* –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
- `–∫–æ–¥` –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
- > –¥–ª—è —Ü–∏—Ç–∞—Ç"""

def is_duplicate(message, interval=2):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    1. ID —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    2. –í—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    message_id = message.message_id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_id in processed_message_ids:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    if user_id in last_message_time:
        time_diff = current_time - last_message_time[user_id]
        if time_diff < interval:
            return True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    processed_message_ids.add(message_id)
    last_message_time[user_id] = current_time
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö message_id (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if len(processed_message_ids) > 1000:
        processed_message_ids.clear()
    
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
def retry_on_error(func):
    def wrapper(*args, **kwargs):
        retries = 0
        while retries < MAX_RETRIES:
            try:
                return func(*args, **kwargs)
            except (requests.exceptions.RequestException, 
                    telebot.apihelper.ApiException,
                    ConnectionError,
                    TimeoutError) as e:
                retries += 1
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—ã—Ç–∫–∞ {retries} –∏–∑ {MAX_RETRIES}")
                if retries < MAX_RETRIES:
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—à–∏–±–∫–∞: {e}")
                    raise
    return wrapper

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
def run_bot():
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            time.sleep(5)
            continue

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_duplicate(message):
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    subscribe_btn1 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ SigmaAI', url='https://t.me/SigmaAIchannel')
    subscribe_btn2 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Ares AI', url='https://t.me/Aress_AI')
    subscribe_btn3 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ NeuroMorphe-GPT', url='https://t.me/neuromorphe3')
    markup.add(subscribe_btn1, subscribe_btn2, subscribe_btn3)
    
    welcome_text = """
**–ü—Ä–∏–≤–µ—Ç! –Ø SigmaAI - –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫!** ü§ñ

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

üåü *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/rules` - –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ `/models` - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò
‚Ä¢ `/img` - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ `/image_models` - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ `/setrule` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ò–ò (–¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π)
‚Ä¢ `/unrule` - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
‚Ä¢ `/role` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ò–ò (–¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π)
‚Ä¢ `/unrole` - —É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å
‚Ä¢ `/dialog` - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ `/web` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Web Search (–¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π)
‚Ä¢ `/jailbreak` - —Ä–µ–∂–∏–º jailbreak (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò:*
‚Ä¢ `deepseek-r1` - –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `gpt-4o` - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `llama-3.3-70b` - –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `gemini-1.5-flash` - –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `o3-mini` - –º–æ—â–Ω–µ–π—à–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `claude-3.5-sonnet` - —É–º–Ω–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `SearchGPT` - –º–æ–¥–µ–ª—å —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É

*–ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
‚Ä¢ `flux` - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
‚Ä¢ `midjourney` - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å

üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/models` _–∏_ `/image_models` _–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏._
    """
    bot.reply_to(message, welcome_text, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['rules'])
def send_rules(message):
    if is_duplicate(message):
        return
    rules_text = """
üìú *–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SigmaAI* üìú

1. *–û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø*
‚Ä¢ _–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á_
‚Ä¢ _–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π_
‚Ä¢ _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç_

2. *–≠–¢–ò–ö–ê –û–ë–©–ï–ù–ò–Ø*
‚Ä¢ _–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–ø–∞–º –∏ —Ñ–ª—É–¥_

3. *–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨*
‚Ä¢ _–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –±–æ—Ç—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é_
‚Ä¢ _–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏_
‚Ä¢ _–ü—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏_

4. *–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ò–ò*
‚Ä¢ _–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é_
‚Ä¢ _–ù–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –æ—Ç–≤–µ—Ç—ã –ò–ò_
‚Ä¢ _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤_

5. *–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø*
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤_

6. *–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ê–°–ü–ï–ö–¢–´*
‚Ä¢ _–°–æ–±–ª—é–¥–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏_
‚Ä¢ _–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–ª–æ–≥_
‚Ä¢ _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /models –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏_

*–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.*
    """
    bot.reply_to(message, rules_text, parse_mode='Markdown')

@bot.message_handler(commands=['models'])
def choose_model(message):
    if is_duplicate(message):
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç –∫–æ–º–∞–Ω–¥—ã /models –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
        
    user_id = message.from_user.id
    user_model = user_models.get(user_id, default_model)
    markup = types.InlineKeyboardMarkup()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    categories = {
        "<----- Deepseek ----->": ["deepseek-r1"],
        "<----- OpenAI ----->": ["gpt-4o", "o3-mini"],
        "<----- Anthropic ----->": ["claude-3.5-sonnet"],
        "<----- Google ----->": ["gemini-1.5-flash"],
        "<----- Search ----->": ["SearchGPT"]
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–µ –º–æ–¥–µ–ª–µ–π
    for category, models in categories.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        markup.add(types.InlineKeyboardButton(
            text=category,
            callback_data=f"category_{category}"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
        for i in range(0, len(models), 2):
            row_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç—Ä–æ–∫—É
            model = models[i]
            button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
            row_buttons.append(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"model_{model}"
            ))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –µ—ë
            if i + 1 < len(models):
                model = models[i + 1]
                button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
                row_buttons.append(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"model_{model}"
                ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            markup.row(*row_buttons)
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:", reply_markup=markup)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∏–∂–µ.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('model_'))
def handle_model_selection(call):
    # –ò–∑–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    selected_model = '_'.join(call.data.split('_')[1:])  # –ë–µ—Ä–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ 'model_'
    user_id = call.from_user.id
    current_model = get_user_model(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
    if selected_model == current_model:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    old_model = user_models.get(user_id)
    user_models[user_id] = selected_model
    logger.info(f"–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_model} –Ω–∞ {selected_model}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ 
    markup = types.InlineKeyboardMarkup()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    categories = {
        "<----- Deepseek ----->": ["deepseek-r1"],
        "<----- OpenAI ----->": ["gpt-4o", "o3-mini"],
        "<----- Anthropic ----->": ["claude-3.5-sonnet"],
        "<----- Google ----->": ["gemini-1.5-flash"],
        "<----- Search ----->": ["SearchGPT"]
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–µ –º–æ–¥–µ–ª–µ–π
    for category, models in categories.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        markup.add(types.InlineKeyboardButton(
            text=category,
            callback_data=f"category_{category}"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
        for i in range(0, len(models), 2):
            row_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç—Ä–æ–∫—É
            model = models[i]
            button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
            row_buttons.append(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"model_{model}"
            ))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –µ—ë
            if i + 1 < len(models):
                model = models[i + 1]
                button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
                row_buttons.append(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"model_{model}"
                ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            markup.row(*row_buttons)
    
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}",
            reply_markup=markup
        )
        bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {selected_model}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏")

@bot.message_handler(commands=['gmodels'])
def choose_image_model(message):
    user_model = user_image_models.get(message.from_user.id, default_image_model)
    markup = types.InlineKeyboardMarkup()
    
    for model in available_image_models:
        button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"img_model_{model}"
        ))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('img_model_'))
def handle_image_model_selection(call):
    selected_model = call.data.split('_')[2]
    current_model = user_image_models.get(call.from_user.id, default_image_model)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
    if selected_model == current_model:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return
    
    user_image_models[call.from_user.id] = selected_model
    
    markup = types.InlineKeyboardMarkup()
    for model in available_image_models:
        button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"img_model_{model}"
        ))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=markup
    )
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {selected_model}")

@bot.message_handler(commands=['img'])
def generate_image(message):
    if is_duplicate(message):
        logger.info(f"–î—É–±–ª–∏–∫–∞—Ç –∫–æ–º–∞–Ω–¥—ã /img –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
        
    if len(message.text.split()) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /img")
        return
        
    user_id = message.from_user.id
    current_model = user_image_models.get(user_id, default_image_model)
    thinking_msg = bot.reply_to(message, "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    logger.info(f"–ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –º–æ–¥–µ–ª—å—é {current_model}")
    
    try:
        prompt = " ".join(message.text.split()[1:])
        prompt_encoded = urllib.parse.quote(prompt)
        seed = int(time.time())
        
        if current_model == "flux":
            image_url = f"https://pollinations.ai/p/{prompt_encoded}?width=1024&height=1024&seed={seed}&model=flux&nologo=true&private=false&enhance=true&safe=false"
        elif current_model == "midjourney":
            image_url = f"https://pollinations.ai/p/{prompt_encoded}?width=1024&height=1024&seed={seed}&model=midjourney&nologo=true&private=false&enhance=true&safe=false"
        
        response = requests.get(image_url)
        if response.status_code == 200:
            bot.send_photo(
                message.chat.id,
                response.content,
                caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {current_model.capitalize()}",
                reply_to_message_id=message.message_id
            )
            bot.delete_message(thinking_msg.chat.id, thinking_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.edit_message_text(
            chat_id=thinking_msg.chat.id,
            message_id=thinking_msg.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(content_types=['photo'])
@retry_on_error
def handle_photo(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    caption = message.caption or "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–µ—Ç–∞–ª—è—Ö"
    
    thinking_msg = bot.reply_to(message, f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", parse_mode='Markdown')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = requests.get(file_url)
        image_data = base64.b64encode(response.content).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        system_message = "–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PollinationsAI —Å –º–æ–¥–µ–ª—å—é OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        response_text = g4f.ChatCompletion.create(
            model="OpenAI",
            provider=Provider.PollinationsAI,
            messages=[
                {"role": "system", "content": system_message},
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": caption},
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/jpeg;base64,{image_data}"}
                        }
                    ]
                }
            ],
            web_search=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        )
        
        if response_text:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            formatted_response = f"üñºÔ∏è *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n{response_text}"
            
            try:
                bot.edit_message_text(
                    chat_id=thinking_msg.chat.id,
                    message_id=thinking_msg.message_id,
                    text=formatted_response,
                    parse_mode='Markdown'
                )
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except telebot.apihelper.ApiException as e:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}")
                bot.edit_message_text(
                    chat_id=thinking_msg.chat.id,
                    message_id=thinking_msg.message_id,
                    text=f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n{response_text}"
                )
        else:
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.edit_message_text(
            chat_id=thinking_msg.chat.id,
            message_id=thinking_msg.message_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(commands=['setrule'])
def set_rule(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    command_text = message.text.strip()
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
    if len(command_text.split()) == 1:
        current_rule = user_rules.get(user_id)
        if current_rule:
            response_text = (
                "*–¢–µ–∫—É—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ò–ò:*\n"
                f"```\n{current_rule}\n```\n\n"
                "_–≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._\n\n"
                "*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:*\n"
                "`/setrule –í–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ`"
            )
        else:
            response_text = (
                "‚ùå *–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ò–ò –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ*\n\n"
                "*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:*\n"
                "`/setrule –í–∞—à–µ –ø—Ä–∞–≤–∏–ª–æ`\n\n"
                "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ `/setrule –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É`\n\n"
                "_–ó–∞–¥–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._"
            )
        bot.reply_to(message, response_text, parse_mode='Markdown')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ /setrule)
    new_rule = ' '.join(command_text.split()[1:])
    user_rules[user_id] = new_rule
    
    bot.reply_to(
        message,
        "‚úÖ *–ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*\n\n"
        "_–≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._",
        parse_mode='Markdown'
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ò–ò")

@bot.message_handler(commands=['dialog'])
def clear_dialog(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    if user_id in user_chat_history:
        user_chat_history[user_id] = {}
        bot.reply_to(
            message,
            "üóë *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!*\n_–¢–µ–ø–µ—Ä—å –ò–ò –Ω–µ –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞._",
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")
    else:
        bot.reply_to(
            message,
            "‚ÑπÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.*",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['jailbreak'])
def toggle_jailbreak(message):
    if is_duplicate(message):
        return
    
        bot.reply_to(
            message,
        "‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è JAILBREAK –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
        "_–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö!_",
            parse_mode='Markdown'
        )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É jailbreak (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@bot.message_handler(commands=['role'])
def set_role(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    command_text = message.text.strip()
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    if len(command_text.split()) == 1:
        current_role = user_roles.get(user_id)
        if current_role:
            response_text = (
                "*–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ò–ò:*\n"
                f"```\n{current_role}\n```\n\n"
                "_–≠—Ç–∞ —Ä–æ–ª—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._\n\n"
                "*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:*\n"
                "`/role –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏`\n\n"
                "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ `/role –ó–µ–ª–µ–Ω—Å–∫–∏–π` _–∏–ª–∏_ `/role –°—Ç–∏–≤ –î–∂–æ–±—Å`"
            )
        else:
            response_text = (
                "‚ùå *–†–æ–ª—å –¥–ª—è –ò–ò –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–∞*\n\n"
                "*–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:*\n"
                "`/role –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏`\n\n"
                "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ `/role –ó–µ–ª–µ–Ω—Å–∫–∏–π`\n\n"
                "_–ó–∞–¥–∞–Ω–Ω–∞—è —Ä–æ–ª—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._"
            )
        bot.reply_to(message, response_text, parse_mode='Markdown')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ /role)
    new_role = ' '.join(command_text.split()[1:])
    user_roles[user_id] = new_role
    
    bot.reply_to(
        message,
        f"‚úÖ *–ù–æ–≤–∞—è —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*\n"
        f"_–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∫:_ `{new_role}`\n\n"
        "_–≠—Ç–∞ —Ä–æ–ª—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò._",
        parse_mode='Markdown'
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ò–ò: {new_role}")

@bot.message_handler(commands=['unrole'])
def remove_role(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    current_role = user_roles.get(user_id)
    
    if current_role:
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_roles:
            del user_roles[user_id]
        
        bot.reply_to(
            message,
            "‚úÖ *–†–æ–ª—å –¥–ª—è –ò–ò —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!*\n\n"
            "_–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –±–µ–∑ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–æ–ª–∏._",
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Ä–æ–ª—å –ò–ò")
    else:
        bot.reply_to(
            message,
            "‚ÑπÔ∏è *–†–æ–ª—å –¥–ª—è –ò–ò –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.*\n\n"
            "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É_ `/role –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏` _–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏._",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['unrule'])
def reset_rule(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    current_rule = user_rules.get(user_id)
    
    if current_rule:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        if user_id in user_rules:
            del user_rules[user_id]
        
        bot.reply_to(
            message,
            "‚úÖ *–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ò–ò —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!*\n\n"
            f"_–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:_ `{default_rule}`",
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–æ –ò–ò –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
    else:
        bot.reply_to(
            message,
            "‚ÑπÔ∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.*\n\n"
            "_–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:_ `{default_rule}`\n\n"
            "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É_ `/setrule –í–∞—à–µ –ø—Ä–∞–≤–∏–ª–æ` _–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª–∞._",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['web'])
def toggle_web_search(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    current_state = user_web_search.get(user_id, False)
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    user_web_search[user_id] = not current_state
    new_state = user_web_search[user_id]
    
    if new_state:
        response_text = (
            "‚úÖ *–†–µ–∂–∏–º Web Search –≤–∫–ª—é—á–µ–Ω!*\n\n"
            "_–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤._\n\n"
            "‚ÑπÔ∏è _–†–µ–∂–∏–º Web Search –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ò–ò —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞_"
        )
    else:
        response_text = (
            "‚ùå *–†–µ–∂–∏–º Web Search –≤—ã–∫–ª—é—á–µ–Ω!*\n\n"
            "_–ò–ò –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É._\n\n"
            "‚ÑπÔ∏è _–†–µ–∂–∏–º Web Search –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ò–ò —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞_"
        )
    
    bot.reply_to(message, response_text, parse_mode='Markdown')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–≤–∫–ª—é—á–∏–ª' if new_state else '–≤—ã–∫–ª—é—á–∏–ª'} —Ä–µ–∂–∏–º Web Search")

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if is_duplicate(message):
        return
    
    user_id = message.from_user.id
    model = get_user_model(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    user_rule = user_rules.get(user_id, default_rule)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    user_role = user_roles.get(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Web Search
    web_search_enabled = user_web_search.get(user_id, False)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏/–ø—Ä–∞–≤–∏–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
    model_emoji = {
        "gpt-4o": "üß†",
        "deepseek-r1": "ü§ñ",
        "llama-3.3-70b": "ü¶ô",
        "gemini-1.5-flash": "‚ö°",
        "o3-mini": "üîÆ",
        "claude-3.5-sonnet": "üßø",
        "SearchGPT": "üîç"
    }.get(model, "ü§î")
    
    thinking_text = f"{model_emoji} –ú–æ–¥–µ–ª—å *{model}* –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏
    if user_role:
        thinking_text += f"\nüë§ *–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å:* `{user_role}`"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    rule_preview = user_rule
    if len(rule_preview) > 30:
        rule_preview = rule_preview[:27] + "..."
    thinking_text += f"\nüìú *–ü—Ä–∞–≤–∏–ª–æ:* `{rule_preview}`"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä Web Search
    if web_search_enabled:
        thinking_text += f"\nüåê *Web Search:* –í–∫–ª—é—á–µ–Ω"
    
    thinking_msg = bot.reply_to(
        message, 
        thinking_text,
        parse_mode='Markdown'
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        chat_history = get_user_history(user_id, model)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = {
            "gpt-4o": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã GPT-4o.",
            "deepseek-r1": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã DeepSeek-r1.",
            "llama-3.3-70b": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã Llama 3.3 70B.",
            "gemini-1.5-flash": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã Gemini 1.5 Flash.",
            "o3-mini": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã O3 Mini.",
            "claude-3.5-sonnet": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã Claude 3.5 Sonnet.",
            "SearchGPT": "–ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã SearchGPT —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        system_message = SYSTEM_RULE
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if user_role:
            system_message += f"\n\n–¢—ã –¥–æ–ª–∂–µ–Ω –∏–≥—Ä–∞—Ç—å —Ä–æ–ª—å: {user_role}. –û—Ç–≤–µ—á–∞–π, –¥—É–º–∞–π –∏ –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ {user_role}, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å —Ä–µ—á–∏ –∏ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –æ Web Search, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
        if web_search_enabled:
            system_message += "\n\n–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫."
            
        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏ –ø—Ä–∞–≤–∏–ª–æ
        system_message += "\n\n–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        
        messages = [{"role": "system", "content": system_message}] + chat_history + [{"role": "user", "content": message.text}]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è web_search
        if model == "gpt-4o":
            response = g4f.ChatCompletion.create(
                model="gpt-4o",
                provider=Provider.PollinationsAI,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "deepseek-r1":
            response = g4f.ChatCompletion.create(
                model="deepseek-r1",
                provider=Provider.Blackbox,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "llama-3.3-70b":
            response = g4f.ChatCompletion.create(
                model="llama-3.3-70b",
                provider=Provider.DeepInfraChat,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "gemini-1.5-flash":
            response = g4f.ChatCompletion.create(
                model="gemini-1.5-flash",
                provider=Provider.Blackbox,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "o3-mini":
            response = g4f.ChatCompletion.create(
                model="o3-mini",
                provider=Provider.DDG,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "claude-3.5-sonnet":
            response = g4f.ChatCompletion.create(
                model="Claude-Sonnet-3.5",
                provider=Provider.Blackbox,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        elif model == "SearchGPT":
            response = g4f.ChatCompletion.create(
                model="SearchGPT",
                provider=Provider.PollinationsAI,
                messages=messages,
                max_tokens=4000,
                web_search=web_search_enabled
            )
        
        if response:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(user_id, model, "user", message.text)
            add_to_history(user_id, model, "assistant", response)
            
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text=response,
                parse_mode='Markdown'
            )
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {model} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model}: {e}")
        bot.edit_message_text(
            chat_id=thinking_msg.chat.id,
            message_id=thinking_msg.message_id,
            text=f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é** `{model}`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_model(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    current_model = user_models.get(user_id)
    
    if current_model is None:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model}")
        user_models[user_id] = default_model
        return default_model
        
    if current_model not in available_models:
        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å {current_model} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–±—Ä–æ—Å –Ω–∞ {default_model}")
        user_models[user_id] = default_model
        return default_model
        
    logger.info(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_model}")
    return current_model

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history(user_id, model):
    if user_id not in user_chat_history:
        user_chat_history[user_id] = {}
    if model not in user_chat_history[user_id]:
        user_chat_history[user_id][model] = []
    return user_chat_history[user_id][model]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
def add_to_history(user_id, model, role, content):
    history = get_user_history(user_id, model)
    history.append({"role": role, "content": content})
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(history) > 20:
        history.pop(0)
    user_chat_history[user_id][model] = history

def signal_handler(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞...")
    try:
        bot.stop_polling()
    except:
        pass
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ SigmaAI...")
        run_bot()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            bot.stop_polling()
        except:
            pass
        sys.exit(0)
