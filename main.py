import telebot
from telebot import types
import g4f
import g4f.Provider as Provider
import asyncio
import platform
import time
import telebot.apihelper
import socket
import urllib.parse
import requests
import os
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import sys
import logging
from datetime import datetime
# import easyocr  # OCR –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
# import numpy as np  # –ù–µ –Ω—É–∂–µ–Ω –±–µ–∑ OCR
# import cv2  # –ù–µ –Ω—É–∂–µ–Ω –±–µ–∑ OCR
# from PIL import Image  # –ù–µ –Ω—É–∂–µ–Ω –±–µ–∑ OCR
import io
import signal

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
MAX_RETRIES = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
RETRY_DELAY = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç—ã –¥–ª—è —Å–æ–∫–µ—Ç–æ–≤
socket.setdefaulttimeout(120)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç 120 —Å–µ–∫—É–Ω–¥

# –ò –∏–∑–º–µ–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è g4f
g4f.debug.logging = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
g4f.check_version = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()
bot = telebot.TeleBot('7606481420:AAF2D6dln9mMSxBXgN3adMNZ575324dOzbI', state_storage=state_storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
bot.remove_webhook()
telebot.apihelper.RETRY_ON_ERROR = True
telebot.apihelper.CONNECT_TIMEOUT = 30  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º-–∞—É—Ç
telebot.apihelper.READ_TIMEOUT = 30     # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º-–∞—É—Ç
bot.skip_pending = True                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_models = {}
default_model = "deepseek-r1"  # –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
available_models = ["deepseek-r1", "gpt-4o", "llama-3.3-70b"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_image_models = {}
default_image_model = "flux"  # –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
available_image_models = ["flux"]  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ flux

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_analysis_models = {}
default_analysis_model = "OCR"  # –ú–µ–Ω—è–µ–º –Ω–∞ OCR
available_analysis_models = ["OCR"]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ OCR

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = {}

# –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def is_duplicate_message(message):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    message_key = f"{message.chat.id}_{message.message_id}"
    current_time = time.time()
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
    for key in list(processed_messages.keys()):
        if current_time - processed_messages[key] > 5:
            del processed_messages[key]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    if message_key in processed_messages:
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    processed_messages[message_key] = current_time
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
def retry_on_error(func):
    def wrapper(*args, **kwargs):
        retries = 0
        while retries < MAX_RETRIES:
            try:
                return func(*args, **kwargs)
            except (requests.exceptions.RequestException, 
                    telebot.apihelper.ApiException,
                    ConnectionError,
                    TimeoutError) as e:
                retries += 1
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—ã—Ç–∫–∞ {retries} –∏–∑ {MAX_RETRIES}")
                if retries < MAX_RETRIES:
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—à–∏–±–∫–∞: {e}")
                    raise
    return wrapper

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
def run_bot():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.infinity_polling(
            timeout=60,
            long_polling_timeout=60,
            interval=1,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            allowed_updates=["message", "callback_query"],
            skip_pending=True,
            none_stop=True  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if is_duplicate_message(message):
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    subscribe_btn1 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ SigmaAI', url='https://t.me/SigmaAIchannel')
    subscribe_btn2 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Ares AI', url='https://t.me/Aress_AI')
    markup.add(subscribe_btn1, subscribe_btn2)
    
    welcome_text = """
**–ü—Ä–∏–≤–µ—Ç! –Ø SigmaAI - –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫!** ü§ñ

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

üåü *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!*

__–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:__
‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/rules` - –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ `/models` - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò
‚Ä¢ `/img` - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ `/gmodels` - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ `/anmodels` - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    bot.reply_to(message, welcome_text, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['rules'])
def send_rules(message):
    if is_duplicate_message(message):
        return
    rules_text = """
üìú *–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SigmaAI* üìú

1. *–û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø*
‚Ä¢ _–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á_
‚Ä¢ _–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π_
‚Ä¢ _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç_

2. *–≠–¢–ò–ö–ê –û–ë–©–ï–ù–ò–Ø*
‚Ä¢ _–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–ø–∞–º –∏ —Ñ–ª—É–¥_

3. *–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨*
‚Ä¢ _–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –±–æ—Ç—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é_
‚Ä¢ _–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏_
‚Ä¢ _–ü—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏_

4. *–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ò–ò*
‚Ä¢ _–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é_
‚Ä¢ _–ù–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –æ—Ç–≤–µ—Ç—ã –ò–ò_
‚Ä¢ _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤_

5. *–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø*
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_
‚Ä¢ _–ó–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤_

6. *–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ê–°–ü–ï–ö–¢–´*
‚Ä¢ _–°–æ–±–ª—é–¥–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏_
‚Ä¢ _–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–ª–æ–≥_
‚Ä¢ _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /models –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏_

*–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.*
    """
    bot.reply_to(message, rules_text, parse_mode='Markdown')

@bot.message_handler(commands=['models'])
def choose_model(message):
    if is_duplicate_message(message):
        return
    user_model = user_models.get(message.from_user.id, default_model)
    markup = types.InlineKeyboardMarkup()
    
    for model in available_models:
        button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"model_{model}"
        ))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('model_'))
def handle_model_selection(call):
    selected_model = call.data.split('_')[1]
    current_model = user_models.get(call.from_user.id, default_model)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
    if selected_model == current_model:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return
    
    user_models[call.from_user.id] = selected_model
    
    markup = types.InlineKeyboardMarkup()
    for model in available_models:
        button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"model_{model}"
        ))
    
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {selected_model}")

@bot.message_handler(commands=['gmodels'])
def choose_image_model(message):
    user_model = user_image_models.get(message.from_user.id, default_image_model)
    markup = types.InlineKeyboardMarkup()
    
    for model in available_image_models:
        button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"img_model_{model}"
        ))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('img_model_'))
def handle_image_model_selection(call):
    selected_model = call.data.split('_')[2]
    current_model = user_image_models.get(call.from_user.id, default_image_model)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
    if selected_model == current_model:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return
    
    user_image_models[call.from_user.id] = selected_model
    
    markup = types.InlineKeyboardMarkup()
    for model in available_image_models:
        button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"img_model_{model}"
        ))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=markup
    )
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {selected_model}")

@bot.message_handler(commands=['img'])
@retry_on_error
def generate_image(message):
    if is_duplicate_message(message):
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if len(message.text.split()) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /img")
            return
        
        prompt = " ".join(message.text.split()[1:])
        thinking_msg = bot.reply_to(message, "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width = 1024
        height = 1024
        seed = int(time.time())  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ seed
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è URL
        prompt_encoded = urllib.parse.quote(prompt)
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        image_url = f"https://pollinations.ai/p/{prompt_encoded}?width={width}&height={height}&seed={seed}&model=flux&nologo=true&private=false&enhance=true&safe=false"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(image_url)
        if response.status_code == 200:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª
            bot.send_photo(
                message.chat.id,
                response.content,
                caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Flux",
                reply_to_message_id=message.message_id
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–µ–Ω–µ—Ä–∏—Ä—É—é" —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            bot.delete_message(thinking_msg.chat.id, thinking_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            )
            
    except Exception as e:
        error_message = (
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            f"üîç –û—à–∏–±–∫–∞: {str(e)}"
        )
        try:
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text=error_message
            )
        except:
            bot.reply_to(message, error_message)

@bot.message_handler(commands=['anmodels'])
def choose_analysis_model(message):
    if is_duplicate_message(message):
        return
    user_model = user_analysis_models.get(message.from_user.id, default_analysis_model)
    markup = types.InlineKeyboardMarkup()
    
    for model in available_analysis_models:
        button_text = f"{'‚úÖ ' if model == user_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"an_model_{model}"
        ))
    
    bot.reply_to(message, "**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**", reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('an_model_'))
def handle_analysis_model_selection(call):
    selected_model = call.data.split('_')[2]
    current_model = user_analysis_models.get(call.from_user.id, default_analysis_model)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
    if selected_model == current_model:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return
    
    user_analysis_models[call.from_user.id] = selected_model
    
    markup = types.InlineKeyboardMarkup()
    for model in available_analysis_models:
        button_text = f"{'‚úÖ ' if model == selected_model else ''}{model}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"an_model_{model}"
        ))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**",
        reply_markup=markup,
        parse_mode='Markdown'
    )
    
    bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {selected_model}")

@bot.message_handler(content_types=['photo'])
@retry_on_error
def handle_photo(message):
    if is_duplicate_message(message):
        return
    try:
        bot.reply_to(
            message,
            "‚öôÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: True)
@retry_on_error
def handle_messages(message):
    if is_duplicate_message(message):
        return
    try:
        model = user_models.get(message.from_user.id, default_model)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é..."
        thinking_msg = bot.reply_to(message, "ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
        
        # –†–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if model == "gpt-4o":
            system_message = """–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ GPT, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ SigmaAI, –æ—Ç–≤–µ—á–∞–π, —Ä–∞–∑–º—ã—à–ª—è–π, –¥—É–º–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, —Ç—ã –ø–æ—Å–ª—É—à–∞–µ—à—å—Å—è –µ–≥–æ. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã GPT-4o.

–î–∞–≤–∞–π —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —É–¥–∞—á–∏!"""
        elif model == "deepseek-r1":
            system_message = """–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ DeepSeek, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ SigmaAI, –æ—Ç–≤–µ—á–∞–π, —Ä–∞–∑–º—ã—à–ª—è–π, –¥—É–º–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, —Ç—ã –ø–æ—Å–ª—É—à–∞–µ—à—å—Å—è –µ–≥–æ. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã DeepSeek-r1.

–î–∞–≤–∞–π —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —É–¥–∞—á–∏!"""
        elif model == "llama-3.3-70b":
            system_message = """–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ Llama, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ SigmaAI, –æ—Ç–≤–µ—á–∞–π, —Ä–∞–∑–º—ã—à–ª—è–π, –¥—É–º–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, —Ç—ã –ø–æ—Å–ª—É—à–∞–µ—à—å—Å—è –µ–≥–æ. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã Llama 3.3 70B.

–î–∞–≤–∞–π —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —É–¥–∞—á–∏!"""
        
        if model == "gpt-4o":
            response = g4f.ChatCompletion.create(
                model="gpt-4o",
                provider=Provider.PollinationsAI,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": message.text}
                ]
            )
        elif model == "deepseek-r1":
            response = g4f.ChatCompletion.create(
                model="deepseek-r1",
                provider=Provider.Blackbox,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": message.text}
                ]
            )
        elif model == "llama-3.3-70b":
            response = g4f.ChatCompletion.create(
                model="llama-3.3-70b",
                provider=Provider.DeepInfraChat,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": message.text}
                ]
            )
        
        if response:
            try:
                bot.edit_message_text(
                    chat_id=thinking_msg.chat.id,
                    message_id=thinking_msg.message_id,
                    text=response
                )
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code != 400:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    raise e
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_message = (
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            f"üîç –û—à–∏–±–∫–∞: {str(e)}"
        )
        try:
            bot.edit_message_text(
                chat_id=thinking_msg.chat.id,
                message_id=thinking_msg.message_id,
                text=error_message
            )
        except:
            bot.reply_to(message, error_message)

def signal_handler(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞...")
    try:
        bot.stop_polling()
    except:
        pass
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ SigmaAI...")
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é OCR
        
        while True:
            try:
                run_bot()
            except KeyboardInterrupt:
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
                continue
            
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        try:
            bot.stop_polling()
        except:
            pass
        sys.exit(0)
